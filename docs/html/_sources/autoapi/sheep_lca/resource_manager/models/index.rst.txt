:py:mod:`sheep_lca.resource_manager.models`
===========================================

.. py:module:: sheep_lca.resource_manager.models

.. autoapi-nested-parse::

   Models Module
   -------------

   This module contains classes for representing and manipulating dynamic data structures used in livestock data management, specifically for lifecycle assessment in sheep farming. It includes classes for handling animal data, emissions factors, grass data, concentrate data, and upstream data.

   Classes:
       DynamicData: A base class for creating objects that hold dynamic data.
       AnimalCategory: Represents different categories of animals on a farm, inheriting from DynamicData.
       AnimalCollection: Represents a collection of animal categories, inheriting from DynamicData.
       Farm: Represents a farm entity, inheriting from DynamicData.
       Animal_Features: Contains all features related to animals used in lifecycle assessment.
       Emissions_Factors: Holds emissions factors data relevant to lifecycle assessment.
       Grass: Contains data about different types of grasses.
       Concentrate: Contains data about different types of animal feed concentrates.
       Upstream: Contains upstream data such as resources used and emissions released before reaching the farm.

   Functions:
       load_grass_data(): Loads and returns grass data.
       load_concentrate_data(): Loads and returns concentrate data.
       load_upstream_data(): Loads and returns upstream data.
       load_emissions_factors_data(): Loads and returns emissions factors data.
       load_animal_features_data(): Loads and returns animal features data.
       load_farm_data(farm_data_frame): Takes a DataFrame and returns a dictionary of Farm objects.
       load_livestock_data(animal_data_frame): Takes a DataFrame and returns a dictionary of AnimalCollection objects mapped by farm ID.
       print_livestock_data(data): Utility function to print livestock data for debugging or logging.

   The classes mainly serve as containers for the data loaded from external sources like databases or CSV files, enabling structured access and manipulation of this data within the lifecycle assessment processes.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   sheep_lca.resource_manager.models.DynamicData
   sheep_lca.resource_manager.models.AnimalCategory
   sheep_lca.resource_manager.models.AnimalCollection
   sheep_lca.resource_manager.models.Farm
   sheep_lca.resource_manager.models.Animal_Features
   sheep_lca.resource_manager.models.Emissions_Factors
   sheep_lca.resource_manager.models.Grass
   sheep_lca.resource_manager.models.Concentrate
   sheep_lca.resource_manager.models.Upstream



Functions
~~~~~~~~~

.. autoapisummary::

   sheep_lca.resource_manager.models.load_grass_data
   sheep_lca.resource_manager.models.load_concentrate_data
   sheep_lca.resource_manager.models.load_upstream_data
   sheep_lca.resource_manager.models.load_emissions_factors_data
   sheep_lca.resource_manager.models.load_animal_features_data
   sheep_lca.resource_manager.models.load_farm_data
   sheep_lca.resource_manager.models.load_livestock_data
   sheep_lca.resource_manager.models.print_livestock_data



.. py:class:: DynamicData(data, defaults={})


   Bases: :py:obj:`object`

   A base class for creating dynamic data objects. This class is designed to create instances with attributes
   that are dynamically assigned based on input data. It allows for the easy creation and manipulation of
   data objects without needing a predefined class structure.

   Attributes are set based on two inputs: a defaults dictionary and a data dictionary. The defaults dictionary
   provides initial values for attributes, ensuring that the object has all necessary attributes with default values.
   The data dictionary contains actual values meant to override these defaults where applicable.

   :param data: A dictionary containing actual values for attributes of the instance. Keys correspond to attribute
                names, and values correspond to the values those attributes should take.
   :type data: dict
   :param defaults: A dictionary containing default values for attributes of the instance. Keys
                    correspond to attribute names, and values are the default values those attributes
                    should take. Defaults to an empty dictionary if not provided.
   :type defaults: dict, optional


.. py:class:: AnimalCategory(data)


   Bases: :py:obj:`DynamicData`

   A specialized data container class for animal categories, extending DynamicData. This class is designed
   to store and manage information specific to different types of animals.
   It predefines a set of attributes with default values relevant to animal data management.

   Inherits from:
       DynamicData: Inherits the capability to dynamically set attributes based on input data.

   Default Attributes (and their default values):
       pop (int): Population count of the animals in this category (default: 0).
       wool (float): Average wool produced in kg (default: 0.0).
       weight (float): Average weight per animal, in kilograms (default: 0.0).
       forage (str): Type of forage consumed by the animals (default: 'average').
       grazing (str): Type of grazing condition (default: 'pasture').
       con_type (str): Type of concentrate feed provided (default: 'concentrate').
       con_amount (float): Amount of concentrate feed provided per day, in kilograms (default: 0.0).
       t_outdoors (int): Average time spent outdoors per day, in hours (default: 24).
       t_indoors (int): Average time spent indoors per day, in hours (default: 0).
       t_stabled (int): Average time spent in stable conditions per day, in hours (default: 0).
       mm_storage (str): Type of manure management storage system (default: 'solid').
       daily_spreading (str): Type of manure spreading technique used daily (default: 'none').
       n_sold (int): Number of animals sold from this category (default: 0).
       n_bought (int): Number of animals bought into this category (default: 0).
       meat_price_kg (float): Price of meat per kilogram (default: 0.0).
       wool_price_kg (float): Price of wool per kilogram (default: 0.0).

   :param data: A dictionary containing actual values for attributes of the animal category. Keys correspond
                to attribute names, and values correspond to the values those attributes should take.
   :type data: dict


.. py:class:: AnimalCollection(data)


   Bases: :py:obj:`DynamicData`

   A data container class for a collection of animal categories. It extends the
   DynamicData class to enable dynamic attribute assignment based on input data, typically used to represent a group
   of animals categorized by species, age, or other criteria.

   Inherits from:
       DynamicData: Inherits the capability to dynamically set attributes based on input data.

   :param data: A dictionary where keys represent category names or identifiers, and values are instances of
                AnimalCategory or similar data structures that hold information specific to each animal group.
   :type data: dict


.. py:class:: Farm(data)


   Bases: :py:obj:`DynamicData`

   A data container class representing a "farm", or similar unit, extending the DynamicData class to enable dynamic attribute assignment
   based on input data. This class is typically used to encapsulate all relevant information about a "farm", including
   details about various animal collections, resources, and management practices.

   Inherits from:
       DynamicData: Inherits the capability to dynamically set attributes based on input data.

   :param data: A dictionary containing attributes and values that represent various aspects of the farm. This
                can include information such as the farm's ID, location, size, and any specific animal collections
                associated with the farm.
   :type data: dict


.. py:class:: Animal_Features(data)


   Bases: :py:obj:`object`

   A class that encapsulates various features and statistical data related to different categories of farm animals.
   This class is designed to store and provide access to a wide array of information concerning animal characteristics,
   such as weight characteristics.

   .. attribute:: data_frame

      A DataFrame containing animal features data.

      :type: pandas.DataFrame

   .. attribute:: animal_features

      A dictionary storing all the animal features with keys representing the feature names
      and values representing the corresponding data extracted from the DataFrame.

      :type: dict

   :param data: The DataFrame containing the animal features data.
   :type data: pandas.DataFrame

   .. method:: Various getter methods for each animal feature, such as get_mature_weight_male(), etc.

      
      

   .. py:method:: get_mature_weight_male()

      Returns the mature weight of male sheep.

      :returns: The mature weight of male sheep.
      :rtype: float


   .. py:method:: get_mature_weight_female()

      Returns the mature weight of female sheep.

      :returns: The mature weight of female sheep.
      :rtype: float


   .. py:method:: get_ewe_weight_after_weaning()

      Returns the weight of ewes after weaning.

      :returns: The weight of ewes after weaning.
      :rtype: float


   .. py:method:: get_lamb_less_1_yr_weight_after_weaning()

      Returns the weight of lambs less than 1 year old after weaning.

      :returns: The weight of lambs less than 1 year old after weaning.
      :rtype: float


   .. py:method:: get_lamb_more_1_yr_weight_after_weaning()

      Returns the weight of lambs more than 1 year old after weaning.

      :returns: The weight of lambs more than 1 year old after weaning.
      :rtype: float


   .. py:method:: get_lamb_weight_gain()

      Returns the weight gain of lambs.

      :returns: The weight gain of lambs.
      :rtype: float


   .. py:method:: get_ram_weight_after_weaning()

      Returns the weight of rams after weaning.

      :returns: The weight of rams after weaning.
      :rtype: float


   .. py:method:: get_ewe_weight_1_year_old()

      Returns the weight of ewes at 1 year old.

      :returns: The weight of ewes at 1 year old.
      :rtype: float


   .. py:method:: get_lamb_less_1_yr_weight()

      Returns the weight of lambs less than 1 year old.

      :returns: The weight of lambs less than 1 year old.
      :rtype: float


   .. py:method:: get_lamb_more_1_yr_weight()

      Returns the weight of lambs more than 1 year old.

      :returns: The weight of lambs more than 1 year old.
      :rtype: float


   .. py:method:: get_lamb_male_more_1_year_old()

      Returns the weight of male lambs more than 1 year old.

      :returns: The weight of male lambs more than 1 year old.
      :rtype: float


   .. py:method:: get_ram_weight_1_year_old()

      Returns the weight of rams at 1 year old.

      :returns: The weight of rams at 1 year old.
      :rtype: float


   .. py:method:: get_lamb_weight_at_birth()

      Returns the weight of lambs at birth.

      :returns: The weight of lambs at birth.
      :rtype: float


   .. py:method:: is_loaded()

      Checks if the data frame has been loaded successfully.

      :returns: True if the data frame is not None, False otherwise.
      :rtype: bool



.. py:class:: Emissions_Factors(data)


   Bases: :py:obj:`object`

   A class that encapsulates emissions factor data for various elements related to livestock farming. This includes
   factors for methane production, nitrogen emissions, and energy use among others. The class provides methods to
   retrieve specific emissions factors based on livestock types and activities.

   .. attribute:: data_frame

      A DataFrame containing all the emissions factors data.

      :type: pandas.DataFrame

   .. attribute:: emissions_factors

      A dictionary mapping emissions factor names to their values.

      :type: dict

   :param data: The DataFrame containing emissions factors data. Each row represents a different
                set of factors and includes columns for each type of emissions factor.
   :type data: pandas.DataFrame

   .. method:: Each 'get' method corresponds to a specific type of emissions factor, allowing for easy retrieval of data

      

   .. method:: for use in calculations. For example, get_ef_net_energy_for_maintenance_sheep_up_to_a_year() returns the

      

   .. method:: energy required for maintenance of a sheep up to a year old.

      
      
      

   .. py:method:: get_ef_net_energy_for_maintenance_sheep_up_to_a_year()

      Returns the net energy required for maintenance of sheep up to a year old.

      :returns: The net energy required for maintenance of sheep up to a year old.
      :rtype: float


   .. py:method:: get_ef_net_energy_for_maintenance_sheep_more_than_a_year()

      Returns the net energy required for maintenance of sheep more than a year old.

      :returns: The net energy required for maintenance of sheep more than a year old.
      :rtype: float


   .. py:method:: get_ef_net_energy_for_maintenance_intact_male_up_to_year()

      Returns the net energy required for maintenance of intact male up to a year old.

      :returns: The net energy required for maintenance of intact male up to a year old.
      :rtype: float


   .. py:method:: get_ef_net_energy_for_maintenance_intact_male_more_than_a_year()

      Returns the net energy required for maintenance of intact male over a year old.

      :returns: The net energy required for maintenance of intact male over a year old.
      :rtype: float


   .. py:method:: get_ef_feeding_situation_housed_ewes()

      Returns the coefficient for feeding situation of housed ewes.

      :returns: The coefficient for feeding situation of housed ewes.
      :rtype: float


   .. py:method:: get_ef_feeding_situation_grazing_flat_pasture()

      Returns the coefficient for feeding situation of grazing on flat pasture.

      :returns: The coefficient for feeding situation of grazing on flat pasture.
      :rtype: float


   .. py:method:: get_ef_feeding_situation_grazing_hilly_pasture()

      Returns the coefficient for feeding situation of grazing on hilly pasture.

      :returns: The coefficient for feeding situation of grazing on hilly pasture.
      :rtype: float


   .. py:method:: get_ef_feeding_situation_housed_fattening_lambs()

      Returns the coefficient for feeding situation of housed fattening lambs.

      :returns: The coefficient for feeding situation of housed fattening lambs.
      :rtype: float


   .. py:method:: get_ef_net_energy_for_growth_females_a()

      Returns the coefficient_a for net energy required for growth for females.

      :returns: The coefficient_a for net energy required
      :rtype: float


   .. py:method:: get_ef_net_energy_for_growth_males_a()

      Returns the coefficient_a for net energy required for growth for males.

      :returns: The coefficient_a for net energy required for growth males.
      :rtype: float


   .. py:method:: ef_net_energy_for_growth_castrates_a()

      Returns the coefficient_a for net energy required for growth for castrates.

      :returns: The coefficient_a for net energy required for growth for castrates.
      :rtype: float


   .. py:method:: get_ef_net_energy_for_growth_females_b()

      Returns the coefficient_b for net energy required for growth for females.

      :returns: The coefficient_b for net energy required for growth for females.
      :rtype: float


   .. py:method:: get_ef_net_energy_for_growth_males_b()

      Returns the coefficient_b for net energy required for growth for males.

      :returns: The coefficient_b for net energy required for growth for males.
      :rtype: float


   .. py:method:: ef_net_energy_for_growth_castrates_b()

      Returns the coefficient_b for net energy required for growth for castrates.

      :returns: The coefficient_b for net energy required for growth for castrates.
      :rtype: float


   .. py:method:: get_ef_net_energy_for_pregnancy()

      Returns the net energy required for pregnancy.

      :returns: The net energy required for pregnancy.
      :rtype: float


   .. py:method:: get_ef_methane_conversion_factor_sheep()

      Returns the methane conversion factor for sheep.

      :returns: The methane conversion factor for sheep.
      :rtype: float


   .. py:method:: get_ef_methane_conversion_factor_lamb()

      Returns the methane conversion factor for lamb.

      :returns: The methane conversion factor for lamb.
      :rtype: float


   .. py:method:: get_ef_fracGASM_total_ammonia_nitrogen_pasture_range_paddock_deposition()

      Returns the fraction of total ammonia nitrogen pasture range paddock deposition.

      :returns: The fraction of total ammonia nitrogen pasture range paddock deposition.
      :rtype: float


   .. py:method:: get_ef3__cpp_pasture_range_paddock_sheep_direct_n2o()

      Returns the direct N2O emissions factor for sheep in pasture range paddock.

      :returns: The direct N2O emissions factor for sheep in pasture range paddock.
      :rtype: float


   .. py:method:: get_ef_direct_n2o_emissions_soils()

      Returns the direct N2O emissions factor for soils.

      :returns: The direct N2O emissions factor for soils.
      :rtype: float


   .. py:method:: get_ef_indirect_n2o_atmospheric_deposition_to_soils_and_water()

      Returns the indirect N2O emissions factor for atmospheric deposition to soils and water.

      :returns: The indirect N2O emissions factor for atmospheric deposition to soils and water.
      :rtype: float


   .. py:method:: get_ef_indirect_n2o_from_leaching_and_runoff()

      Returns the indirect N2O emissions factor from leaching and runoff.

      :returns: The indirect N2O emissions factor from leaching and runoff.
      :rtype: float


   .. py:method:: get_ef_TAN_house_liquid()

      Returns the emissions factor for total ammonia nitrogen from house liquid.

      :returns: The emissions factor for total ammonia nitrogen from house liquid.
      :rtype: float


   .. py:method:: get_ef_TAN_house_solid_deep_bedding()

      Returns the emissions factor for total ammonia nitrogen from house solid deep bedding.

      :returns: The emissions factor for total ammonia nitrogen from house solid deep bedding.
      :rtype: float


   .. py:method:: get_ef_TAN_storage_tank()

      Returns the emissions factor for total ammonia nitrogen from storage tank.

      :returns: The emissions factor for total ammonia nitrogen from storage tank.
      :rtype: float


   .. py:method:: get_ef_TAN_storage_solid_deep_bedding()

      Returns the emissions factor for total ammonia nitrogen from storage solid deep bedding.

      :returns: The emissions factor for total ammonia nitrogen from storage solid deep bedding.
      :rtype: float


   .. py:method:: get_ef_mcf_liquid_tank()

      Returns the methane conversion factor for liquid tank.

      :returns: The methane conversion factor for liquid tank.
      :rtype: float


   .. py:method:: get_ef_mcf_solid_storage_deep_bedding()

      Returns the methane conversion factor for solid storage deep bedding.

      :returns: The methane conversion factor for solid storage deep bedding.
      :rtype: float


   .. py:method:: get_ef_mcf_anaerobic_digestion()

      Returns the methane conversion factor for anaerobic digestion.

      :returns: The methane conversion factor for anaerobic digestion.
      :rtype: float


   .. py:method:: get_ef_n2o_direct_storage_tank_liquid()

      Returns the direct N2O emissions factor for storage tank liquid.

      :returns: The direct N2O emissions factor for storage tank liquid.
      :rtype: float


   .. py:method:: get_ef_n2o_direct_storage_tank_solid()

      Returns the direct N2O emissions factor for storage tank solid.

      :returns: The direct N2O emissions factor for storage tank solid.
      :rtype: float


   .. py:method:: get_ef_n2o_direct_storage_solid_deep_bedding()

      Returns the direct N2O emissions factor for storage solid deep bedding.

      :returns: The direct N2O emissions factor for storage solid deep bedding.
      :rtype: float


   .. py:method:: get_ef_n2o_direct_storage_tank_anaerobic_digestion()

      Returns the direct N2O emissions factor for storage tank anaerobic digestion.

      :returns: The direct N2O emissions factor for storage tank anaerobic digestion.
      :rtype: float


   .. py:method:: get_ef_nh3_daily_spreading_none()

      Returns the emissions factor for NH3 from daily spreading with no method.

      :returns: The emissions factor for NH3 from daily spreading with no method.
      :rtype: float


   .. py:method:: get_ef_nh3_daily_spreading_manure()

      Returns the emissions factor for NH3 from daily spreading with manure.

      :returns: The emissions factor for NH3 from daily spreading with manure.
      :rtype: float


   .. py:method:: get_ef_nh3_daily_spreading_broadcast()

      Returns the emissions factor for NH3 from daily spreading with broadcast.

      :returns: The emissions factor for NH3 from daily spreading with broadcast.
      :rtype: float


   .. py:method:: get_ef_nh3_daily_spreading_injection()

      Returns the emissions factor for NH3 from daily spreading with injection.

      :returns: The emissions factor for NH3 from daily spreading with injection.
      :rtype: float


   .. py:method:: get_ef_nh3_daily_spreading_traling_hose()

      Returns the emissions factor for NH3 from daily spreading with trailing hose.

      :returns: The emissions factor for NH3 from daily spreading with trailing hose.
      :rtype: float


   .. py:method:: get_ef_urea()

      Returns the emissions factor for urea.

      :returns: The emissions factor for urea.
      :rtype: float


   .. py:method:: get_ef_urea_and_nbpt()

      Returns the emissions factor for urea and NBPT.

      :returns: The emissions factor for urea and NBPT.
      :rtype: float


   .. py:method:: get_ef_fracGASF_urea_fertilisers_to_nh3_and_nox()

      Get the emissions factor for urea fertilisers to NH3 and NOx.

      :returns: The emissions factor for urea fertilisers to NH3 and NOx.
      :rtype: float


   .. py:method:: get_ef_fracGASF_urea_and_nbpt_to_nh3_and_nox()

      Get the emissions factor for urea and NBPT to NH3 and NOx.

      :returns: The emissions factor for urea and NBPT to NH3 and NOx.
      :rtype: float


   .. py:method:: get_ef_frac_leach_runoff()

      Get the fraction of leaching and runoff.

      :returns: The fraction of leaching and runoff.
      :rtype: float


   .. py:method:: get_ef_ammonium_nitrate()

      Get the emissions factor for ammonium nitrate.

      :returns: The emissions factor for ammonium nitrate.
      :rtype: float


   .. py:method:: get_ef_fracGASF_ammonium_fertilisers_to_nh3_and_nox()

      Get the emissions factor for ammonium fertilisers to NH3 and NOx.

      :returns: The emissions factor for ammonium fertilisers to NH3 and NOx.
      :rtype: float


   .. py:method:: get_ef_Frac_P_Leach()

      Get the fraction of phosphorus leaching.

      :returns: The fraction of phosphorus leaching.
      :rtype: float


   .. py:method:: get_ef_urea_co2()

      Get the co2 emissions factor for urea.

      :returns: The co2 emissions factor for urea.
      :rtype: float


   .. py:method:: get_ef_lime_co2()

      Get the co2 emissions factor for lime.

      :returns: The co2 emissions factor for lime.
      :rtype: float


   .. py:method:: is_loaded()

      Check if the emissions factors data has been successfully loaded.

      :returns: True if the data has been loaded, False otherwise.
      :rtype: bool



.. py:class:: Grass(data)


   Bases: :py:obj:`object`

   Represents the data and functionality related to various types of grass.

   .. attribute:: data_frame

      A DataFrame containing grass data.

      :type: pandas.DataFrame

   .. attribute:: grasses

      A dictionary storing information for each grass genus,
      including its forage dry matter digestibility, crude protein,
      and gross energy values.

      :type: dict

   .. method:: average(property)

      Calculates the average value of a specified property
      (e.g., dry matter digestibility) across all grasses.

   .. method:: get_forage_dry_matter_digestibility(forage)

      Returns the dry matter
      digestibility for a given forage.

   .. method:: get_crude_protein(forage)

      Returns the crude protein value for a given forage.

   .. method:: get_gross_energy_mje_dry_matter(forage)

      Returns the gross energy (in MJ per
      dry matter) for a given forage.

   .. method:: is_loaded()

      Checks whether the data frame is loaded successfully.
      

   .. py:method:: average(property)


   .. py:method:: get_forage_dry_matter_digestibility(forage)

      Get the dry matter digestibility for a given forage.

      :param forage: The name of the forage.
      :type forage: str

      :returns: The dry matter digestibility for the specified forage.
      :rtype: float


   .. py:method:: get_crude_protein(forage)

      Get the crude protein value for a given forage.

      :param forage: The name of the forage.
      :type forage: str

      :returns: The crude protein value for the specified forage.
      :rtype: float


   .. py:method:: get_gross_energy_mje_dry_matter(forage)

      Get the gross energy (in MJ per dry matter) for a given forage.

      :param forage: The name of the forage.
      :type forage: str

      :returns: The gross energy for the specified forage.
      :rtype: float


   .. py:method:: is_loaded()

      Check if the grass data has been successfully loaded.

      :returns: True if the data has been loaded, False otherwise.
      :rtype: bool



.. py:class:: Concentrate(data)


   Bases: :py:obj:`object`

   Represents the data and functionality related to various types of animal feed concentrates.

   .. attribute:: data_frame

      A DataFrame containing concentrate data.

      :type: pandas.DataFrame

   .. attribute:: concentrates

      A dictionary storing information for each type of concentrate,
      including its dry matter digestibility, digestible energy, crude protein,
      gross energy, CO2 equivalents, and PO4 equivalents.

      :type: dict

   .. method:: average(property)

      Calculates the average value of a specified property (e.g., dry matter digestibility)
      across all concentrates.

   .. method:: get_con_dry_matter_digestibility(concentrate)

      Returns the dry matter digestibility for a given concentrate.

   .. method:: get_con_digestible_energy(concentrate)

      Returns the digestible energy proportion for a given concentrate.

   .. method:: get_con_crude_protein(concentrate)

      Returns the crude protein value for a given concentrate.

   .. method:: get_gross_energy_mje_dry_matter(concentrate)

      Returns the gross energy (in MJ per dry matter) for a given concentrate.

   .. method:: get_con_co2_e(concentrate)

      Returns the CO2 equivalents for a given concentrate.

   .. method:: get_con_po4_e(concentrate)

      Returns the PO4 equivalents for a given concentrate.

   .. method:: is_loaded()

      Checks whether the data frame is loaded successfully.
      

   .. py:method:: average(property)


   .. py:method:: get_con_dry_matter_digestibility(concentrate)

      Get the dry matter digestibility for a given concentrate.

      :param concentrate: The name of the concentrate.
      :type concentrate: str

      :returns: The dry matter digestibility for the specified concentrate.
      :rtype: float


   .. py:method:: get_con_digestible_energy(concentrate)

      Get the digestible energy proportion for a given concentrate.

      :param concentrate: The name of the concentrate.
      :type concentrate: str

      :returns: The digestible energy proportion for the specified concentrate.
      :rtype: float


   .. py:method:: get_con_crude_protein(concentrate)

      Get the crude protein value for a given concentrate.

      :param concentrate: The name of the concentrate.
      :type concentrate: str

      :returns: The crude protein value for the specified concentrate.
      :rtype: float


   .. py:method:: get_gross_energy_mje_dry_matter(concentrate)

      Get the gross energy (in MJ per dry matter) for a given concentrate.

      :param concentrate: The name of the concentrate.
      :type concentrate: str

      :returns: The gross energy for the specified concentrate.
      :rtype: float


   .. py:method:: get_con_co2_e(concentrate)

      Get the CO2 equivalents for a given concentrate.

      :param concentrate: The name of the concentrate.
      :type concentrate: str

      :returns: The CO2 equivalents for the specified concentrate.
      :rtype: float


   .. py:method:: get_con_po4_e(concentrate)

      Get the PO4 equivalents for a given concentrate.

      :param concentrate: The name of the concentrate.
      :type concentrate: str

      :returns: The PO4 equivalents for the specified concentrate.
      :rtype: float


   .. py:method:: is_loaded()

      Check if the concentrate data has been successfully loaded.

      :returns: True if the data has been loaded, False otherwise.
      :rtype: bool



.. py:class:: Upstream(data)


   Bases: :py:obj:`object`

   Represents upstream data for various inputs in an agricultural context.

   .. attribute:: data_frame

      A DataFrame containing upstream data.

      :type: pandas.DataFrame

   .. attribute:: upstream

      A dictionary storing upstream data for each type,
      including functional units, CO2 equivalents, PO4 equivalents,
      SO2 equivalents, net calorific value, and antimony equivalents.

      :type: dict

   .. method:: get_upstream_fu(upstream)

      Returns the functional unit for a given upstream type.

   .. method:: get_upstream_kg_co2e(upstream)

      Returns the kg of CO2 equivalents for a given upstream type.

   .. method:: get_upstream_kg_po4e(upstream)

      Returns the kg of PO4 equivalents for a given upstream type.

   .. method:: get_upstream_kg_so2e(upstream)

      Returns the kg of SO2 equivalents for a given upstream type.

   .. method:: get_upstream_mje(upstream)

      Returns net calorific value in MJ for a given upstream type.

   .. method:: get_upstream_kg_sbe(upstream)

      Returns the kg of antimony equivalents for a given upstream type.

   .. method:: is_loaded()

      Checks whether the data frame is loaded successfully.
      

   .. py:method:: get_upstream_fu(upstream)

      Get the functional unit for a given upstream type.

      :param upstream: The name of the upstream type.
      :type upstream: str

      :returns: The functional unit for the specified upstream type.
      :rtype: float


   .. py:method:: get_upstream_kg_co2e(upstream)

      Get the kg of CO2 equivalents for a given upstream type.

      :param upstream: The name of the upstream type.
      :type upstream: str

      :returns: The kg of CO2 equivalents for the specified upstream type.
      :rtype: float


   .. py:method:: get_upstream_kg_po4e(upstream)

      Get the kg of PO4 equivalents for a given upstream type.

      :param upstream: The name of the upstream type.
      :type upstream: str

      :returns: The kg of PO4 equivalents for the specified upstream type.
      :rtype: float


   .. py:method:: get_upstream_kg_so2e(upstream)

      Get the kg of SO2 equivalents for a given upstream type.

      :param upstream: The name of the upstream type.
      :type upstream: str

      :returns: The kg of SO2 equivalents for the specified upstream type.
      :rtype: float


   .. py:method:: get_upstream_mje(upstream)

      Get the net calorific value in MJ for a given upstream type.

      :param upstream: The name of the upstream type.
      :type upstream: str

      :returns: The net calorific value in MJ for the specified upstream type.
      :rtype: float


   .. py:method:: get_upstream_kg_sbe(upstream)

      Get the kg of antimony equivalents for a given upstream type.

      :param upstream: The name of the upstream type.
      :type upstream: str

      :returns: The kg of antimony equivalents for the specified upstream type.
      :rtype: float


   .. py:method:: is_loaded()

      Check if the upstream data has been successfully loaded.

      :returns: True if the data has been loaded, False otherwise.
      :rtype: bool



.. py:function:: load_grass_data()

   Load the grass data.

   :returns: An instance of the Grass class containing the grass data.
   :rtype: Grass


.. py:function:: load_concentrate_data()

   Load the concentrate data.

   :returns: An instance of the Concentrate class containing the concentrate data.
   :rtype: Concentrate


.. py:function:: load_upstream_data()

   Load the upstream data.

   :returns: An instance of the Upstream class containing the upstream data.
   :rtype: Upstream


.. py:function:: load_emissions_factors_data()

   Load the emissions factors data.

   :returns: An instance of the EmissionsFactors class containing the emissions factors data.
   :rtype: EmissionsFactors


.. py:function:: load_animal_features_data()

   Load the animal features data.

   :returns: An instance of the AnimalFeatures class containing the animal features data.
   :rtype: AnimalFeatures


.. py:function:: load_farm_data(farm_data_frame)

   Load the farm data.

   :param farm_data_frame: The DataFrame containing the farm data.
   :type farm_data_frame: pandas.DataFrame

   :returns: A dictionary containing the farm data.
   :rtype: dict


.. py:function:: load_livestock_data(animal_data_frame)

   Load the livestock data.

   :param animal_data_frame: The DataFrame containing the livestock data.
   :type animal_data_frame: pandas.DataFrame

   :returns: A dictionary containing the livestock data.
   :rtype: dict


.. py:function:: print_livestock_data(data)

   Print the livestock data.

   :param data: A dictionary containing the livestock data.
   :type data: dict


